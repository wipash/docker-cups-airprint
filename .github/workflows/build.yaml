name: Build and Push Docker Image

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu_version: ["latest", "noble", "jammy", "focal"]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Goss
        uses: e1himself/goss-installation-action@v1
        with:
          version: latest

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.ubuntu_version }}
            type=sha,prefix=${{ matrix.ubuntu_version }}-
            type=raw,value=${{ matrix.ubuntu_version }}-${{ github.ref == 'refs/heads/master' && 'latest' || 'dev' }}

      - name: Build test image
        uses: docker/build-push-action@v5
        id: build-test
        with:
          context: .
          platforms: linux/amd64
          load: true
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu_version }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Goss Tests
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ./tests/goss.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: |
          dgoss run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ubuntu_version }}

      - name: Build and push all platforms
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          build-args: |
            UBUNTU_VERSION=${{ matrix.ubuntu_version }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
